scalar DateTime

enum UserType {
  MANAGER
  MEMBER
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String
  errors: [String]
}

input UserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  role: UserType!
}

type User {
  userId: ID!
  username: String!
  email: String!
  role: UserType!
  createdAt: DateTime
}

type Member {
  memberId: ID!
  memberName: String!
}

type Manager {
  managerId: ID!
  managerName: String!
}

type Team {
  teamId: ID!
  teamName: String!
  managers: [Manager!]!
  members: [Member]
  totalManagers: Int!
  totalMembers: Int
  rosterCount: Int!
}

type UserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String
  errors: [String]
  user: User
}

type AuthMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  errors: [String]
  accessToken: String
  refreshToken: String
  user: User
}

type Query {
  users(role: UserType!): [User!]!
  user(userId: ID!): User
  teams(userId: ID!): [Team!]!
  team(teamId: ID!): Team
  myTeams(userId: ID!): [Team!]!
}

type Mutation {
  createUser(input: CreateUserInput!): UserMutationResponse!
  updateUser(
    userId: ID!
    username: String!
    email: String!
  ): UserMutationResponse!
  login(input: UserInput!): AuthMutationResponse!
  renewToken(userId: ID!): AuthMutationResponse!
}
